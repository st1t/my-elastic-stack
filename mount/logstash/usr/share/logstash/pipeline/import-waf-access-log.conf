input {
  file {
    path => "/tmp/waf.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
  }
#  s3 {
#    bucket => "alb-logs"
#    prefix => "AWSLogs/xxxx/elasticloadbalancing/ap-northeast-1/"
#    exclude_pattern => ".*2024/0[1-6].*"
#  }
}

filter {
  json {
    source => "message"
  }

  ruby {
    code => '
      headers = event.get("[httpRequest][headers]")
      if headers
        headers.each do |header|
          key = header["name"].gsub("-", "_").downcase
          value = header["value"]
          event.set(key, value)
        end
      end
    '
  }

  mutate {
    remove_field => [
      "event",
      "rateBasedRuleList",
      "ruleGroupList"
    ]
  }

  date {
    match => [ "timestamp", "UNIX_MS" ]
    target => "@timestamp"
  }

  useragent {
    source => "user_agent"
    target => "useragent"
  }

  geoip {
    source => "x_forwarded_for"
    target => "geoip"
  }

  if "_geoip_lookup_failure" not in [tags] {
    mutate {
      remove_field => [ "message","event","[user_agent][original]" ]
    }
  }
}

output {
  if "_grokparsefailure" in [tags] or "_geoip_lookup_failure" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "waf-logs-parse-failure-%{+YYYY.MM.dd}"
    }
  } else {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "waf-logs-%{+YYYY.MM.dd}"
    }
  }
}
